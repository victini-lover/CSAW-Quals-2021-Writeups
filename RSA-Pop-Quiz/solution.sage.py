

# This file was *autogenerated* from the file solution.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5008 = Integer(5008); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_9 = Integer(9); _sage_const_0 = Integer(0); _sage_const_0p1 = RealNumber('0.1')
from pwn import *
import owiener, math
from Crypto.Util.number import long_to_bytes

server = remote("crypto.chal.csaw.io",_sage_const_5008 )

def wiener_attack():
	N_data = server.recvline().split(b" = ")
	e_data = server.recvline().split(b" = ")
	c_data = server.recvline().split(b" = ")
	N = int(N_data[_sage_const_1 ][:-_sage_const_2 ])
	e = int(e_data[_sage_const_1 ][:-_sage_const_2 ])
	c = int(c_data[_sage_const_1 ][:-_sage_const_2 ])
	print("N =",N,"\ne =",e,"\nc =",c)
	print(server.recvline())
	print(server.recvline())
	d = owiener.attack(e, N)
	m = long_to_bytes(pow(c,d,N))
	print(m)
	server.sendline(m)
	print(server.recvline())

def sexy_primes():
	N_data = server.recvline().split(b" = ")
	e_data = server.recvline().split(b" = ")
	c_data = server.recvline().split(b" = ")
	N = int(N_data[_sage_const_1 ][:-_sage_const_2 ])
	e = int(e_data[_sage_const_1 ][:-_sage_const_2 ])
	c = int(c_data[_sage_const_1 ][:-_sage_const_2 ])
	print("N =",N,"\ne =",e,"\nc =",c)
	print(server.recvline())
	print(server.recvline())
	p = -_sage_const_3  + pow(N+_sage_const_9 ,_sage_const_1 /_sage_const_2 )
	q = _sage_const_3  + pow(N+_sage_const_9 ,_sage_const_1 /_sage_const_2 )
	phi = (p-_sage_const_1 )*(q-_sage_const_1 )
	d = int(pow(e,-_sage_const_1 ,phi))
	m = long_to_bytes(pow(c,d,N))
	print(m)
	server.sendline(m)
	print(server.recvline())

def lsb_oracle():
	N_data = server.recvline().split(b" = ")
	e_data = server.recvline().split(b" = ")
	c_data = server.recvline().split(b" = ")
	N = int(N_data[_sage_const_1 ][:-_sage_const_2 ])
	e = int(e_data[_sage_const_1 ][:-_sage_const_2 ])
	c = int(c_data[_sage_const_1 ][:-_sage_const_2 ])
	print("N =",N,"\ne =",e,"\nc =",c)
	lower_bound = _sage_const_0 
	upper_bound = N
	i = _sage_const_0 
	while True:
		i += _sage_const_1 
		print(server.recvline())
		print(server.recvline())
		text_to_send = c*pow(_sage_const_2 **i,e,N) % N
		server.sendline(str(text_to_send))
		print(server.recvline())
		bit_data = server.recvline().split()
		print(bit_data)
		if b"0"==bit_data[-_sage_const_1 ]:
			upper_bound = (upper_bound+lower_bound)/_sage_const_2 
		elif b"1"==bit_data[-_sage_const_1 ]:
			lower_bound = (upper_bound+lower_bound)/_sage_const_2 
		else:
			print("Error!")
			break
		print("\nLower bound:",int(lower_bound))
		print("Upper bound:",int(upper_bound))
		print(server.recvline())
		if int(upper_bound) - int(lower_bound) == _sage_const_1 :
			server.sendline("no")
			break
		server.sendline("yes")
	m = long_to_bytes(upper_bound)
	print(server.recvline())
	print(server.recvline())
	print(m)
	server.sendline(m)
	print(server.recvline())

def partial_key():
	N_data = server.recvline().split(b" = ")
	e_data = server.recvline().split(b" = ")
	d0_data = server.recvline().split(b" = ")
	c_data = server.recvline().split(b" = ")
	d0Bits_data = server.recvline().split(b" = ")
	nBits_data = server.recvline().split(b" = ")
	N = int(N_data[_sage_const_1 ][:-_sage_const_2 ])
	e = int(e_data[_sage_const_1 ][:-_sage_const_2 ])
	c = int(c_data[_sage_const_1 ][:-_sage_const_2 ])
	nBits = int(nBits_data[_sage_const_1 ][:-_sage_const_2 ])
	d0bits = int(d0Bits_data[_sage_const_1 ][:-_sage_const_2 ])
	d0 = int(d0_data[_sage_const_1 ][:-_sage_const_2 ])
	print("N =",N,"\ne =",e,"\nc =",c,"\nd0 =",d0,"\nd0Bits =",d0bits,"\nnBits =",nBits)
	X = var('X')
	found = False
	for k in range(_sage_const_1 ,e+_sage_const_1 ):
		if found:
			break
		print("Attempt",k)
		results = solve_mod([e*d0 - k*(N-X+_sage_const_1 ) == _sage_const_1 ], _sage_const_2 **d0bits)
		for x in results:
			s = ZZ(x[_sage_const_0 ])
			P = var('P')
			p0_results = solve_mod([P**_sage_const_2  - s*P + N == _sage_const_0 ], _sage_const_2 **d0bits)
			for y in p0_results:
				p0 = int(y[_sage_const_0 ])
				PR = PolynomialRing(Zmod(N), names=('z',)); (z,) = PR._first_ngens(1)
				f = _sage_const_2 **d0bits*z + p0
				f = f.monic()
				roots = f.small_roots(X=_sage_const_2 **(nBits//_sage_const_2  - d0bits + _sage_const_1 ), beta=_sage_const_0p1 )
				if roots:
					x0 = roots[_sage_const_0 ]
					p = gcd(_sage_const_2 **d0bits*x0 + p0, N)
					q = N//ZZ(p)
					d = int(pow(e,-_sage_const_1 ,(p-_sage_const_1 )*(q-_sage_const_1 )))
					m = long_to_bytes(pow(c,d,N))
					found = True
	print(server.recvline())
	print(server.recvline())
	print(m)
	server.sendline(m)
	print(server.recvline())

print(server.recvline())
print(server.recvline())
wiener_attack()
print(server.recvline())
print(server.recvline())
sexy_primes()
print(server.recvline())
print(server.recvline())
lsb_oracle()
print(server.recvline())
print(server.recvline())
partial_key()
print(server.recvline())
print(server.recvline())
server.close()

