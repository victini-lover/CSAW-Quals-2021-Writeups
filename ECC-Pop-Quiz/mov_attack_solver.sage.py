

# This file was *autogenerated* from the file mov_attack_solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_625276251724681468065787127391468008213949163 = Integer(625276251724681468065787127391468008213949163); _sage_const_625276251724681468065787127391468008213949162 = Integer(625276251724681468065787127391468008213949162); _sage_const_0 = Integer(0); _sage_const_106475251480616516532312035568555890205578047 = Integer(106475251480616516532312035568555890205578047); _sage_const_431897649280430503785680130194791468278435206 = Integer(431897649280430503785680130194791468278435206); _sage_const_325210632278386769754263691768220745652895158 = Integer(325210632278386769754263691768220745652895158); _sage_const_308687159471094662490925278095484225164835682 = Integer(308687159471094662490925278095484225164835682); _sage_const_1 = Integer(1)# Curve parameters --> Replace the next three lines with given values
p = _sage_const_625276251724681468065787127391468008213949163  
a = _sage_const_625276251724681468065787127391468008213949162  
b = _sage_const_0 

# Define curve
E = EllipticCurve(GF(p), [a, b])
order = E.order()
print(is_prime(order))

# Replace the next two lines with given values
P1 = E(_sage_const_106475251480616516532312035568555890205578047  , _sage_const_431897649280430503785680130194791468278435206 )
P2 = E(_sage_const_325210632278386769754263691768220745652895158  , _sage_const_308687159471094662490925278095484225164835682 )
n = P1.order()

k = _sage_const_1 
while (p**k - _sage_const_1 ) % order:
	k += _sage_const_1 

K = GF(p**k, names=('a',)); (a,) = K._first_ngens(1)
EK = E.base_extend(K)
PK = EK(P2)
GK = EK(P1)

while True:
	R = EK.random_point()
	m = R.order()
	d = gcd(m,n)
	Q = (m//d)*R
	if n / Q.order() not in ZZ:
		continue
	if n == Q.order():
		break

print('Computing pairings')
alpha = GK.weil_pairing(Q,n)
beta = PK.weil_pairing(Q,n)

print("Computing the log")
dd = beta.log(alpha)
print(dd)

